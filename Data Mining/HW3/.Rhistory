rm(list=ls())
library(tidyverse)
library(MASS)
library(e1071)
options(scipen=200)
set.seed(233)
data_origin=read_csv("C:/Users/ArkSong/Desktop/GWU/Stat 6240-Statistical Data Mining/Assignments/HW3/events_log.csv",col_names=TRUE)
(data1=data_origin %>%
filter(action=="searchResultPage"|action=="visitPage") %>%
arrange(session_id,timestamp) %>%
group_by(session_id) %>%
mutate(
action_lead=lead(action)
) %>%
filter(action=="searchResultPage") %>%
mutate(
clickthrough=if_else(action_lead!="visitPage" | is.na(action_lead)==TRUE,"FALSE","TRUE")
) %>%
mutate(
hour=substr(timestamp,9,10),
min=substr(timestamp,11,12)
) %>%
ungroup() %>%
dplyr::select(clickthrough,group,n_results,hour,min)
)
View(data_origin)
View(data1)
(data1=data_origin %>%
filter(action=="searchResultPage"|action=="visitPage") %>%
arrange(session_id,timestamp) %>%
group_by(session_id) %>%
mutate(
action_lead=lead(action)
) %>%
filter(action=="searchResultPage") %>%
mutate(
clickthrough=if_else(action_lead!="visitPage" | is.na(action_lead)==TRUE,"FALSE","TRUE")
) %>%
mutate(
hour=substr(timestamp,9,10),
min=substr(timestamp,11,12)
) %>%
ungroup() %>%
dplyr::select(clickthrough,group,n_results,hour,min) %>%
mutate(
clickthrough=as.factor(clickthrough),
group=as.factor(group),
hour=as.integer(hour),
min=as.integer(min)
)
)
train_index=sample(dim(data1)[1],round(dim(data1)[1]*0.1))
data1_train=data1[train_index,]
data1_test=data1[-(train_index),]
View(data1_train)
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
table(data1_train$clickthrough,predict(nb.fit,newdata = data1_train))
rm(list=ls())
library(tidyverse)
library(MASS)
library(e1071)
options(scipen=200)
set.seed(233)
data_origin=read_csv("C:/Users/ArkSong/Desktop/GWU/Stat 6240-Statistical Data Mining/Assignments/HW3/events_log.csv",col_names=TRUE)
(data1=data_origin %>%
filter(action=="searchResultPage"|action=="visitPage") %>%
arrange(session_id,timestamp) %>%
group_by(session_id) %>%
mutate(
action_lead=lead(action)
) %>%
filter(action=="searchResultPage") %>%
mutate(
clickthrough=if_else(action_lead!="visitPage" | is.na(action_lead)==TRUE,"FALSE","TRUE")
) %>%
mutate(
hour=substr(timestamp,9,10),
min=substr(timestamp,11,12)
) %>%
ungroup() %>%
dplyr::select(clickthrough,group,n_results,hour,min) %>%
mutate(
clickthrough=as.factor(clickthrough),
group=as.factor(group),
hour=as.factor(hour),
min=as.factor(min)
)
)
train_index=sample(dim(data1)[1],round(dim(data1)[1]*0.1))
data1_train=data1[train_index,]
data1_test=data1[-(train_index),]
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
table(data1_train$clickthrough,predict(nb.fit,newdata = data1_train))
View(data1_train)
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
table(data1_test$clickthrough,predict(nb.fit,newdata = data1_test))
install.packages("ROCR")
library(ROCR)
install.packages("gplots")
install.packages("gplots")
rm(list=ls())
library(tidyverse)
library(MASS)
library(e1071)
library(ROCR)
library(gplots)
options(scipen=200)
set.seed(233)
data_origin=read_csv("C:/Users/ArkSong/Desktop/GWU/Stat 6240-Statistical Data Mining/Assignments/HW3/events_log.csv",col_names=TRUE)
(data1=data_origin %>%
filter(action=="searchResultPage"|action=="visitPage") %>%
arrange(session_id,timestamp) %>%
group_by(session_id) %>%
mutate(
action_lead=lead(action)
) %>%
filter(action=="searchResultPage") %>%
mutate(
clickthrough=if_else(action_lead!="visitPage" | is.na(action_lead)==TRUE,"FALSE","TRUE")
) %>%
mutate(
hour=substr(timestamp,9,10),
min=substr(timestamp,11,12)
) %>%
ungroup() %>%
dplyr::select(clickthrough,group,n_results,hour,min) %>%
mutate(
clickthrough=as.factor(clickthrough),
group=as.factor(group),
hour=as.factor(hour),
min=as.factor(min)
)
)
train_index=sample(dim(data1)[1],round(dim(data1)[1]*0.1))
data1_train=data1[train_index,]
data1_test=data1[-(train_index),]
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=predict(nb.fit,newdata = data1_test),
labels=data1_test$clickthrough)
table(data1_test$clickthrough,predict(nb.fit,newdata = data1_test))
predict(nb.fit,newdata = data1_test)
?prediction
dim(predict(nb.fit,newdata = data1_test))
dim(data1_test$clickthrough)
data(iris)
nb.fit1 <- naiveBayes(x=iris[,-5],y=iris$Species)
table(iris$Species,predict(nb.fit1,newdata=iris))
nb1.pred=prediction(predictions=predict(nb1.fit,newdata = iris),
labels=iris$Species)
nb.pred1=prediction(predictions=predict(nb.fit1,newdata = iris),
labels=iris$Species)
predict(nb.fit1,newdata = iris)
as.factor(predict(nb.fit1,newdata = iris))
model.matrix(predict(nb.fit1,newdata = iris))
as.numeric(predict(nb.fit,newdata = data1_test))
as.numeric(predict(nb.fit,newdata = data1_train))
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=as.numeric(predict(nb.fit,newdata = data1_train)),
labels=as.numeric(data1_train$clickthrough))
performance(nb.pred,"auc")@y.values[[1]]
nb.ROC=performance(nb.ROC,"tpr","fpr")
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=as.numeric(predict(nb.fit,newdata = data1_train)),
labels=as.numeric(data1_train$clickthrough))
performance(nb.pred,"auc")@y.values[[1]]
nb.ROC=performance(nb.pred,"tpr","fpr")
plot(nb.ROC)
nb.fit$apriori
nb.fit$tables
nb.fit$levels
nb.fit$call
predict(nb.fit)
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=as.numeric(predict(nb.fit,newdata = data1_train)),
labels=data1_train$clickthrough)
performance(nb.pred,"auc")@y.values[[1]]
nb.ROC=performance(nb.pred,"tpr","fpr")
plot(nb.ROC)
table(data1_test$clickthrough,predict(nb.fit,newdata = data1_test))
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=predict(nb.fit,newdata = data1_train),
labels=data1_train$clickthrough)
predict(nb.fit,newdata = data1_train)
as.vector(predict(nb.fit,newdata = data1_train))
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=as.vector(predict(nb.fit,newdata = data1_train)),
labels=as.vector(data1_train$clickthrough))
as.vector(data1_train$clickthrough)
lr.fit=glm(clickthrough~.,data=data1_train,family = binomial)
predict(lr.fit,data1_train)
lr.pred <- prediction(predictions=predict(lr.fit,data1_train),
labels=data1_train$clickthrough)
lr.pred <- prediction(predictions=predict(lr.fit,data1_train),
labels=data1_train$clickthrough)
performance(lr.pred,"auc")@y.values[[1]]
performance(lr.pred,"auc")@y.values[[1]]
table(data1_test$clickthrough,predict(nb.fit,newdata = data1_test))
lr.fit=glm(clickthrough~.,data=data1_train,family = binomial)
lr.pred <- prediction(predictions=predict(lr.fit,data1_train),
labels=data1_train$clickthrough)
performance(lr.pred,"auc")@y.values[[1]]
lr.ROC <- performance(lr.pred,"tpr","fpr")
plot(lr.ROC)
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=predict(nb.fit,newdata = data1_train,type = "raw"),
labels=data1_train$clickthrough)
predict(nb.fit,newdata = data1_train,type = "raw")
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=predict(nb.fit,newdata = data1_train,type = "raw")[,1],
labels=data1_train$clickthrough)
performance(nb.pred,"auc")@y.values[[1]]
nb.ROC=performance(nb.pred,"tpr","fpr")
plot(nb.ROC)
nb.fit=naiveBayes(x=data1_train[,-1],y=data1_train$clickthrough)
nb.pred=prediction(predictions=predict(nb.fit,newdata = data1_train,type = "raw")[,2],
labels=data1_train$clickthrough)
performance(nb.pred,"auc")@y.values[[1]]
nb.ROC=performance(nb.pred,"tpr","fpr")
plot(nb.ROC)
